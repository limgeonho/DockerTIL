############################################################
삭제 명령

docker stop $(docker ps -a -q)
docker rm $(docker ps -a -q)
docker rmi -f $(docker images -q)

############################################################

히스토리 보는방법[docker history]
docker history myweb => myweb의 히스토리를 볼 수 있다.

컨테이너의 특정파일을 호스트 pc로 가져오는 방법[docker cp]
docker cp mywebserver:/etc/apache2/sites-available/000-default.conf ./
=> 컨테이너안에 mywebserver:/etc/apache2/sites-available/000-default.conf의 파일을 ./(현재 위치)에 가져온다.
=> 반대로 쓰면 호스트의 파일을 컨테이너의 특정파일에 내보낸다.

컨테이너 변경사항을 이미지 파일로 생성하는 방법[docker commit]
내가 만든 이미지를 따로 저장해 놓을 때 => docker commit -m "add vim" mywebserver vimweb

컨테이너가 실행되면서, 기존의 이미지와 비교해서 변경된 파일 목록 출력[docker diff]
=> docker diff mywebserver 
A == 파일 또는 디렉토리 추가
D == 파일 또는 디렉토리 삭제
C == 파일 또는 디렉토리 수정

이미지와 컨테이너 세부 정보 확인[docker inspect]

컨테이너의 출력결과를 확인[docker logs]

############################################################

컨테이너 활용과 연결
docker 로 jupyter notebook 띄우기

쥬피터 노트북의 공식 이미지 => jupyter/datascience-notebook

쥬피터 노트북 설치하기
=> $ docker run --rm -d -p 8888:8888 -v /home/ubuntu/2021_LEARN/:/home/jovyan/work jupyter/datascience-notebook[컨테이너 만들기]
=> 인바운드규칙에 8888추가하기
=> 3.34.73.112:8888 로 들어가면 token을 요구한다
=> $ docker logs containerID 
=> token 값만 복사해서 붙여넣기
=> vi Dockerfile-mysql 만들기
=> $ docker build --tag mysqldb -f Dockerfile-mysql . [이미지 만들기]
=> $ docker run -d -p 3306:3306 --name mydb -v /home/ubuntu/mysqldata:/var/lib/mysql mysqldb[컨테이너 만들기]

############################################################

컨테이너와 컨테이너 연결하기
docker run의 옵션으로 --link옵션을 사용해서 연결(내부적으로)
--link<본래의 컨테이너 이름>:<컨테이너를 가리킬 이름>

=> $ docker build --tag mysqldb -f Dockerfile-mysql . [이미지 만들기]
=> $ docker run --rm -d --name mydb -v /home/ubuntu/mysqldata:/var/lib/mysql mysqldb [mysql컨테이너 만들기]
=> $ docker run --rm -d -p 8888:8888 -v /home/ubuntu/2021_LEARN/:/home/jovyan/work --link mydb:myjupyterdb jupyter/datascience-notebook [mydb와 연결한 jupyter컨테이너 만들기]

############################################################
############################################################

Docker Compose
여러 컨테이너를 모아서 관리하기 위한 툴
why? => 프런트 서버, 백 서버, 데이터베이스 등 다양하게 컨테이너를 만들어서 서로 연결해야함

Docker Compose 작성
docker-compose.yml 파일을 작성하여 실행

############################################################

docker-compose.yml 에는 기본적으로 작성하는 카테고리(key)가 존재한다.
1. version : Docker Compose 파일 포맷 버전 지정
2. services : 위 항목 아래에서 여러개 또는 하나의 컨테이너를 설정함(하위의 항목들을 설정한다고 생각 한번에)
3. volumes : docker run 옵션 중 -v와 같은 역할(여러개 작성 가능)
4. networks
 
version: "3"
=> 버전 3

services:
  db:
    image: mysql:5.7
    restart: always
    volumes:
      - ./mysqldata:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=funcoding
      - MYSQL_DATABASE=fundb
    ports:
      - "3306:3306"

=> db라는 컨테이너 아래 mysql5.7을 base로 하는 이미지 
=> restart: always는 만약에 컨테이너가 종료되면 알아서 restart되버림 bb
=> volumes 하위에 여러개의 -v옵션을 줄 수 있음
=> environment 는 ENV와 같음
=> ports 는 docker run 옵션 중 -p와 같은 역할(하지만 YAML에서는 3306:3306을 시간으로 판단하기 때문에 "3306:3306"으로 작성한다!)

############################################################

docker-compose.yml 파일 실행하기(사용법 1)

=> $ vi docker-compose.yml [docker-compose 파일 만들기]
=> 해당 yml 파일안에 docker-compose 내용 작성
=> $ docker-compose up -d [백그라운드로 docker-compose 파일 실행]
=> $ docker-compose stop [docker-compose 파일 실행 중지]
=> $ docker-compose down [docker-compose 파일 삭제]

docker-compose 는 해당 .yml 파일이 있는 폴더안에서 up, down 한다

############################################################

docker-compose.yml 파일에 컨테이너를 추가해서 연결(사용법 2)

version: "3"

services:
  app:
    build:
      context: ./01_FLASK_DOCKER
      dockerfile: Dockerfile
    links:
      - "db:mysqldb"
    ports:
      - "80:8080"
    container_name: appcontainer
    depends_on:
      - db

=> app 이라는 컨테이너와 db라는 컨테이너를 하나의 docker-compose 파일 안에서 실행
=> build 하위에 context는 Dockerfile 이 있는 디렉토리 / dockerfile는 Dockerfile 파일명
=> links 컨테이너 내부에서 다른 컨테이너를 접속하고 싶을 때 사용(예시는 db컨테이너를 app컨테이너에서 사용하고 싶을 때 : mysqldb라는 이름으로)
=> container_name 해당 컨테이너의 이름은 appcontainer 
=> depends_on app 컨테이너가 시작되기 전에 미리 db컨테이너 먼저 실행!

  db:
    image: mysql:5.7
    volumes:
      - ./mysqldata:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=funcoding
      - MYSQL_DATABASE=fundb
    ports:
      - "3306:3306"
    container_name: dbcontainer

$ docker-compose logs : 로그 기록 확인
$ docker-compose config : 해당 docker-compose.yml 내용 확인 




